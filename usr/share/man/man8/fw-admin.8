.TH FW-ADMIN 8 "13 Ago 2012"
.SH NAME
fw-admin \- Tool for managing an iptables-based firewall.
.SH SYNOPSIS
\fBfw-admin -s\fP

\fBfw-admin -a\fP [\fIipv4|ipv6|fqdn\fP]

\fBfw-admin -as\fP [\fInombreset\fP]

\fBfw-admin -r\fP

\fBfw-admin -i\fP [\fIipv4|ipv6|fqdn|var\fP]

\fBfw-admin -c\fP \fIfichero\fP

\fBfw-admin --start\fP {\fIvlan|nat|core\fP} [--nocheck]

\fBfw-admin --stop\fP {\fIvlan|nat|core\fP}

\fBfw-admin --ipset-reload\fP [--nocheck]

\fBfw-admin --help\fP
.SH DESCRIPCION
\fBfw-admin\fP es una herramienta diseñada por y para CICA, que es el nucleo del firewall perimetral general de la red.
Es un script escrito en \fBBash(1)\fP, que implementa controles y procedimientos para facilitar la administracion del firewall.
.SH FUNCIONALIDADES
Algunas características y funcionalidades que permite \fBfw-admin\fP son:
.TP
· Abstracción de \fBip{tables|6tables}\fP mediante el uso de variables que se sustituyen alternativamente por el valor IPv4 e IPv6. 
Esto permite escribir una única regla y que valga para ambos protocolos (doble stack).
.TP
· Checkeo de las variables y la sintaxis usada en las reglas. Se evitan la mayoría de errores cometidos por el administrador.
.TP
· Cierta transaccionalidad, que permite dejar reglas de tráfico permisivo cuando hay algun fallo en el funcionamiento de \fBfw-admin\fP y durante las operaciones.
.TP
· Integración con \fBipset(8)\fP, para el uso de conjuntos de datos.
.TP
· Facilidad de integracion en entornos de alta disponibilidad, con \fBPacemaker(8)\fP.
.TP
· Ahorro de miles de consultas al DNS mediante el cacheo estático de los datos del DNS en ficheros de datos (las variables).
.TP
· Preparado para trabajar en entornos de grandes rulesets. Se ha diseñado para soportar entornos lentos con cientos de miles de variables y reglas.
.SH OPCIONES
.TP 
\fB-s\fP
Muestra estadisticas del firewall. Al final de la lista de estadisticas, se calcula si el firewall está o no en funcionamiento según el número de reglas en el Kernel.
Se mostrará un mensaje de tipo "El firewall está activo.". Este mensaje es usado por otros scripts (y quizás por \fBPacemaker(8)\fP para calcular si el firewall esta
en funcionamiento en un nodo o máquina.
Puede editarse el numero de reglas necesarias para considerar el firewall corriendo en el fichero \fB/etc/fw-admin.conf\fP en la variable \fB$MINIMAL_AMOUNT_OF_RULES\fP.
.TP 
\fB-a [ipv4|ipv6|fqdn]\fP
Añade una variable al sistema de variables. Puede ser una IPv4, una IPv6 o un FQDN.
Se retornará el nombre de la variable que debe usarse en los ficheros de reglas. 
Si la variable ya estubiera guardada, se actualizará su contenido, consultando al DNS o lo que proceda.
Esta opcion puede llamarse con o sin parámetro de entrada. En caso de llamarla sin argumentos, se mostrará un prompt interactivo.

En caso de usar un FQDN, si este pertenece a \fBDOMAIN\fP (véase \fB/etc/fw-admin.conf\fP más abajo), el nombre de variable que se retornará no contendrá el dominio.

.TP
\fB-as [nombreset]\fP
Para guardar en el sistema un nombre de set. Es necesario llamar con distinto nombre a un set con datos IPv4 y a un set con datos IPv6. 

El nombre de variable resultante siempre será en mayúsculas.

Como curiosidad, decir que el nombre del set se guardara como: "NOMBRE=nombre_ipv4" y "NOMBRE=nombre_ipv6" en los ficheros de datos IPv4 e IPv6 respectivamente.

Esta opcion puede llamarse con o sin parámetro de entrada. En caso de llamarla sin argumentos, se mostrará un prompt interactivo.
.TP
\fB-r\fP
Todas las variables de IPv4, IPv6 y FQDN se recargarán. Por cada variable encontrada en los ficheros datos, se volverá a ejecutar el algoritmo que calcula el 
guardado (el algoritmo de la opción \fB-a\fP).
Es posible que se ignoren ciertas variables que hayan podido meterse a mano en los ficheros de datos, como en las lineas que se encuentre la cadena "\fB##ignorar##\fP".

Ejemplo:
.RS
.TP
[...]
.TP
R2D2=150.214.4.150 #r2d2.cica.es
.TP
IF_INET=eth0 ##ignorar##
.TP
RED_GENERAL=150.214.0.0/16 ##ignorar##
.TP
[...]
.RE	
.TP
\fB-i [ipv4|ipv6|fqdn|var]\fP
Usando esta opcion es posible realizar una busqueda automatizada entre datos, variables y reglas en el kernel.
Se facilita que buscando por un nombre se muestren las reglas de \fBip{tables|6tables}\fP que contienen la IPv4|IPv6 de ese nombre, además de otros datos.
.TP
\fB-c fichero\fP
Se checkearan las variables de \fBfichero\fP y, si procece, la sintaxis de iptables.
Las variables del fichero se compararan con las guardadas en los ficheros de datos y se mostrará un mensaje por cada una que falte.

La sintaxis de iptables se checkeará sustituyendo -A por -C en cada instrudccion de regla y valorando el resultado del código de retorno de iptables (mas info 
en \fBiptables(8)\fP).
La opción \fB-A\fP es la más común a la hora de añadir reglas de \fBiptables(8)\fP y por esto se ha implementado así.

Este es el mismo algoritmo que se usa como paso previo de checkeo al usar la opcion \fB--start\fP.
.TP
\fB--start {vlan|nat|core} [--nocheck]\fP
Se checkea que el fichero existe en la ruta especificada en la variable \fB$CONF_DIR\fP (generalmente \fB/var/local/fw.d/rules/\fP) y que tiene permisos de ejecucion.
Luego, se checkea su sintaxis, de manera similar a la opción \fB-c\fP.
Si todo esta bien, se hará un \fB`source'\fP de los ficheros de vairables IPv4 y se ejecutarán las reglas. Luego un \fB`source'\fP de los ficheros de variables IPv6 
y otra ejecución de las reglas.

Antes de empezar a ejecutar las reglas descritas en los ficheros, se borraran todas, dejando una regla de tráfico permisivo. Si cuando se acaben de introducir las nuevas
reglas, no hay ningun error, la regla de trafico permisivo es eliminada. Esta regla esta identificada con un comentario y suele poner algo asi como "regla_transaccional_fw_admin"
para su fácil identificación en caso de error.

La orden \fB--start\fP sirve como reload. Se diferencian fichero de reglas standar (vlan), ficheros de nat y el fichero core, debido a las características concretas de cada tipo de regla.
Por ejemplo, en el fichero de core no se checkeará la sintaxis (si las variables), y por ejemplo, los ficheros de nat no se ejecutarán en IPv6.

La opción \fB--nocheck\fP evade los checkeos de sintaxis y variables. Esta pensada para casos donde es necesario hacer un start rápido.
.TP
\fB--stop {vlan|nat|core}\fP
Se flushean las reglas y se deja una regla permisiva de tráfico.
.TP
\fB--ipset-reload\fP
Se recarga la información de \fBipset(8)\fP en el sistema. Se lee el fichero localizado en \fB$CONF_DIR\fP llamado "\fBsets\fP". No se comprueba sintaxis,
aunque si que se checkean las variables.

La opción \fB--nocheck\fP evade los checkeos de variables. Esta pensada para casos donde es necesaria una operación rápida.
.TP
\fB--help\fP
Muestra la ayuda, de rápida referencia.

.SH ESTRUCTURA DE FICHEROS
Ficheros importantes en el firewall:
.TP
\fB/etc/fw-admin.conf\fR
Fichero principal de configuración.
.TP
\fB/etc/init.d/firewall\fR
Usando este script, se integra definitivamente \fBfw-admin\fP como servicio en el sistema.
.TP
\fB/usr/sbin/fw-admin\fR
El binario principal de \fBfw-admin\fP. Esta es la ruta estandar que se usó al desarrollar el software y es posible que el administrador la cambie.
.TP
\fB/usr/lib/libfw-admin\fR
La libreria de funciones de \fBfw-admin\fP. Aqui se encuentra la mayor parte del contenido del software.
Esta es la ruta estandar que se usó al desarrollar el software y es posible que el administrador la cambie.
Al principio de este fichero están declaradas todas las variables que no están declaradas en \fB/etc/fw-admin.conf\fP.
.TP
\fB$CONF_DIR/core\fR
Se espera que exista este fichero, donde se declara el esqueleto netfilter interno del firewall. Debe tener permisos de ejecución.
.TP
\fB$CONF_DIR/nat\fR
Aqui se declaran las reglas de nateo. Debe tener permisos de ejecucion.
.TP
\fB$CONF_DIR/vlan_x\fR
Reglas generales del firewall, agrupadas por vlanes. Es posible cambiar el nombre y no usar "vlan_x", si no algo como "misreglas", siempre que no se use "core", "nat" y
demás nombres que crean conflicto con los anteriores.
.TP
\fB$CONF_DIR/sets\fR
Fichero de declaracion de \fBipset(8)\fP.

.SH LOS FICHEROS DE DATOS
Para cachear las consultas al DNS y para abstraer la diferencia entre protocolos IPv4 e IPv6 se usan los ficheros de datos.

Los datos no son más que variables en formato \fBbash(1)\fP. Antes de ejecutar cada fichero de reglas, se hará un source de cada fichero de datos correspondiente.

Por lo cual, todas las variables que haya en el fichero de reglas deben estar reflejadas en los ficheros de datos.

Un ejemplo de fichero de datos simple para IPv4 puede ser:

.RS
.TP
\fBVARS_IPV4="$DATA_DIR/iptables_vars_ipv4.bash"\fP 
#!/bin/bash

IPT=/sbin/iptables ##ignorar##

FICTICIA=255.255.255.255

NIC1=eth0 ##ignorar##

NIC2=eth1 ##ignorar##

NETWORK=192.168.0.0/24 ##ignorar##

R2D2=150.214.4.150 #r2d2.cica.es
.RE

Y en IPv6:
.RS
.TP
\fBVARS_IPV6="$DATA_DIR/iptables_vars_ipv6.bash"\fP 
#!/bin/bash

IPT=/sbin/ip6tables ##ignorar##

FICTICIA=ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff ##ignorar##

NIC1=eth0 ##ignorar##

NIC2=eth1 ##ignorar##

NETWORK=$FICTICIA ##ignorar##

R2D2=2a00:9ac0:c1ca:27::150 #r2d2.cica.es
.RE

Recuerde que usando la etiqueta \fB##ignorar##\fP las variables no se recargaran automaticamente con la opcion \fB-r\fP.

.SH CONFIGURACIÓN
El fichero principal de configuración es \fB/etc/fw-admin.conf\fP.

aDurante todo el código de \fBfw-admin\fP se usan recurrentemente algunas variables, que pueden editarse y de las cuales algunas se detallan a continuación:
.TP
\fB$DOMAIN\fP
El dominio principal sobre el que estamos trabajando. Por ejemplo, en CICA se usará: \fBDOMAIN="cica.es"\fP.
.TP
\fB$USE_IPTABLES_CLUSTER\fP
Si se esta usando \fBiptables-cluster(8)\fP para sincronizar reglas de iptables entre nodos de un cluster.
Esto producirá, por ejemplo, que la orden \fI--stop\fP ejecute \fBiptables-cluster(8)\fP para hacer los borrados de reglas en todos los nodos a la vez.

Nótese que para activar o desactivar completamente \fBiptables-cluster(8)\fP debe editar a mano la linea de los ficheros de datos que contiene la variable \fBIPT\fP.

Valores: {yes|no} Por defecto: no
.TP
\fB$MINIMAL_AMOUNT_OF_RULES\fP
El numero minimo de reglas que deben estar insertadas en el kernel para que el se considere que el firewall esta arrancado.
Por defecto u oimisión se usa 40. Puede usarse cualquier numero entero positivo.

En los mensajes de estadisticas se advierte cuando el firewall está arrancado en base a este numero.
.TP
\fB$WORKING_DIR\fP
Directorio principal de trabajo. Se recomienda algo como: \fBWORKING_DIR="/var/local/fw.d"\fP.
.TP
\fB$CONF_DIR\fP
El directorio de las reglas de filtrado. Se recomienda: \fBCONF_DIR="$WORKING_DIR/rules"\fP.
.TP
\fB$DATA_DIR\fP
Directorio para los ficheros de datos. Se recomienda: \fBDATA_DIR="$WORKING_DIR/data"\fP.
.TP
\fB$LOCK_FILE\fP
El fichero de LOCK. Algunas opciones no permiten más de una instancia de \fBfw-admin\fP, por lo que se usa este fichero.

Se recomienda: \fBLOCK_FILE="$WORKING_DIR/fw-admin.lock"\fP.
.TP
\fB$USE_COLORS\fP
Si \fBfw-admin\fP debe o no mostrar colores en su salida a stdout. Los valores son {yes|no}.
.TP
\fB$LOG_ERROR_MESSAGES\fP
Usando esta opción, todos los mensajes de error que se produzcan se logearan usando \fBlogger(1)\fP. Los valores son {yes|no}.
.TP
\fB$LOG_WARN_MESSAGES\fP
Usando esta opción, todos los mensajes de warning que se produzcan se logearan usando \fBlogger(1)\fP. Los valores son {yes|no}.
.TP 
\fBOTRAS\fP
Algunas otras variables son:

\fBVARS_IPV6="$DATA_DIR/iptables_vars_ipv6.bash"\fP el fichero de datos de variables IPv6

\fBVARS_IPV4="$DATA_DIR/iptables_vars_ipv4.bash"\fP el fichero de datos de variables IPv4

\fBVARS_IPSETV4="$DATA_DIR/ipset_vars_ipv4.bash"\fP el fichero de datos de nombres de sets en IPv4

\fBVARS_IPSETV6="$DATA_DIR/ipset_vars_ipv6.bash"\fP el fichero de datos de nombres de sets en IPv6


Nótese que estos ficheros son \fInecesarios\fP para el funcionamiento de \fBfw-admin\fP.


.SH DEPENDENCIAS
Este script necesita distintos binarios y herramientas en el sistema durante diferentes momentos de la ejecucion. 
Si cambiaran de ruta, puede editarse el fichero \fB/usr/lib/libfw-admin\fP y sustituir la correspondiente variable.

Se detallan algunas variables y binarios:
.RS
.TP
\fBIPSET="/usr/sbin/ipset"\fP binario principal de \fBipset(8)\fP.
.TP
\fBIPT="/sbin/iptables"\fP binario principal de \fBiptables(8)\fP.
.TP
\fBIP6T="/sbin/ip6tables"\fP binario principal de \fBip6tables(8)\fP.
.TP
\fBIPT_SAVE="/sbin/iptables-save"\fP binario principal de \fBiptables-save(8)\fP.
.TP
\fBIP6T_SAVE="/sbin/ip6tables-save"\fP binario principal de \fBip6tables-save(8)\fP.
.TP
\fBCONNTRACKD="/usr/sbin/conntrackd"\fP binario del demonio \fBconntrackd(8)\fP.
.TP
\fBCONNTRACK="/usr/sbin/conntrack"\fP binario de la herramienta \fBconntrack(8)\fP.
.TP
\fBDIG="/usr/bin/dig"\fP binario principal de la herramineta \fBdig(1)\fP.
.RE

Si en el fichero de configuración \fB/etc/fw-admin.conf\fP se configura la directiva \fBUSE_IPTABLES_CLUSTER=yes\fP, adicionalmente existirán estas dependencias:
.RS
.TP
\fBIPSET_CLUSTER="/usr/sbin/ipset-cluster"\fP binario principal del wrapper \fBipset-cluster(8)\fP.
.TP
\fBIPT_CLUSTER="/usr/sbin/iptables-cluster"\fP binario principal del wrapper \fBiptables-cluster(8)\fP.
.TP
\fBIP6T_CLUSTER="/usr/sbin/ip6tables-cluster"\fP binario principal del wrapper \fBip6tables-cluster(8)\fP.
.RE

.SH AUTOR, BUGS, COMENTARIOS Y CÓDIGO
El código del sistema \fBfw-admin\fP es público y puede encontrarse en \fBhttps://github.com/aborrero/fw-admin\fP.

Debe visitar ese sitio para reportar bugs y hacer comentarios.

El autor original de esta herramienta y sistema (y página de manual) fue \fBArturo Borrero Gonzalez <aborrero@cica.es>\fP.

Durante el desarrollo y testeo, participaron \fBMarina Moreda Rodrigez <marina.moreda@cica.es>\fP, \fBPedro Gallego Torrecillas <pgallego@cica.es>\fP, y también 
\fBYassine Mohamed Ahram <yahram@cica.es>\fP.
