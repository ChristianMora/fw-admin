#!/bin/bash

# Arturo Borrero <aborrero@cica.es> Marzo/Abril/Mayo/Junio/Julio/Agosto 2012

################################################################
################################################################
# Variables
PID=$$
THIS="`uname -n`"

IPSET="/usr/sbin/ipset"
IPT="/sbin/iptables"
IP6T="/sbin/ip6tables"
IPSET_LOCAL="/usr/sbin/ipset"
IPT_LOCAL="/sbin/iptables"
IP6T_LOCAL="/sbin/ip6tables"
IPSET_CLUSTER="/usr/sbin/ipset-cluster"
IPT_CLUSTER="/usr/sbin/iptables-cluster"
IP6T_CLUSTER="/usr/sbin/ip6tables-cluster"
IPT_SAVE="/sbin/iptables-save"
IP6T_SAVE="/sbin/ip6tables-save"
CONNTRACKD="/usr/sbin/conntrackd"
CONNTRACK="/usr/sbin/conntrack"
DIG="/usr/bin/dig"

AUX_FILE="`mktemp`"

LOGGER_BIN="/usr/bin/logger"
ARGS_LOGGER="-t fw-admin[$PID] --"

################################################################
################################################################
# Control functions

# void message(string message)
# Show a message to stdout and/or stderr. Maybe also to logger
message()
{

	# En el fichero /etc/fw-admin.conf puede configurarse
	# que se muestren colores aqui o no.
	# Se sustituiran las cadenas por la misma cadena con el cÃ³digo del color.
	if [ "$USE_COLORS" == "yes" ]
	then
		echo -e $1 | sed s/"E:"/`echo -en ${C_RED}E:${C_NORMAL}`/ | sed s/"W:"/`echo -en ${C_YELLOW}W:${C_NORMAL}`/ | sed s/"I:"/`echo -en ${C_GREENBOLD}I:${C_NORMAL}`/
	else
		echo -e $1
	fi

	# solo se logean mensajes de error y warning
	[ "$LOG_ERROR_MESSAGES" == "yes" ] && [[ $1 =~ ^"E:" ]] && $LOGGER_BIN $ARGS_LOGGER $1
	[ "$LOG_WARN_MESSAGES" == "yes" ] && [[ $1 =~ ^"W:" ]] && $LOGGER_BIN $ARGS_LOGGER $1

	return 0
}

# void do_exit(int exit_code)
# Exit the program, flushing LOCK_FILE and AUX_FILE
do_exit()
{
	if [ -r "$LOCK_FILE" ]
	then
		if [ "`cat $LOCK_FILE`" == "${$}" ] 2> /dev/null # Borramos el lock file solo si es nuestro
		then
			rm -f $LOCK_FILE 2> /dev/null
		fi
	fi
	if [ -e "$AUX_FILE" ]
	then
		rm -f $AUX_FILE 2> /dev/null
	fi
	exit $1
}

# boolean validate_execution()
# Check if there are other instance in critical mode
validate_execution()
{
	# If LOCK_FILE doesn't exist
	# the execution is our's, so put pid to LOCK_FILE
	if [ ! -r $LOCK_FILE ]
	then
		echo "${$}" > $LOCK_FILE 2> /dev/null
	fi

	local pid=`cat $LOCK_FILE`
	if [ "$pid" != "${$}" ] 2> /dev/null
	then
		message "E: $LOCK_FILE LOCK_FILE already exist with pid: ${pid}. Ending..."
		do_exit 1
	fi
	return 0
}


# boolean check_root()
# Check if this is a root execution.
check_root()
{
	local check_root_retval=0
	if [ `id -u` -ne 0 ]
	then
		message "W: Not root!"
		check_root_retval=1
	fi
	return $check_root_retval
}

# boolean check_files()
# Check for all required files and bins.
check_files()
{
	local check_files_retval=0
	[ -x $IPT_SAVE ] || { message "E: Binary not found [$IPT_SAVE]" ; check_files_retval=1 ; }
	[ -x $IP6T_SAVE ] || { message "E: Binary not found [$IP6T_SAVE]" ; check_files_retval=1 ; }
	[ -w $AUX_FILE ] || { message "E: Fallo al crear el fichero auxiliar [$AUX_FILE]" ; check_files_retval=1 ; }
	[ -d $CONF_DIR ] || { message "E: Dir not found [$CONF_DIR]" ; check_files_retval=1 ; }
	[ -x $IPSET_CONF ] || { message "E: File not found [$IPSET_CONF]" ; check_files_retval=1 ; }
	[ -d $DATA_DIR ] || { message "E: Dir not found [$DATA_DIR]" ; check_files_retval=1 ; }
	[ -d ${WORKING_DIR}/run ] || { message "E: Dir not found [${WORKING_DIR}/run]" ; check_files_retval=1 ; }
	[ -w $VARS_IPV6 ] || { message "E: File not found [$VARS_IPV6]" ; check_files_retval=1 ; }
	[ -w $VARS_IPV4 ] || { message "E: File not found [$VARS_IPV4]" ; check_files_retval=1 ; }
	[ -w $VARS_IPSETV6 ] || { message "E: File not found [$VARS_IPSETV6]" ; check_files_retval=1 ; }
	[ -w $VARS_IPSETV4 ] || { message "E: File not found [$VARS_IPSETV4]" ; check_files_retval=1 ; }
	[ -x $IPT ] || { message "E: Binary not found [$IPT]." ; check_files_retval=1 ; }
	[ -x $IP6T ] || { message "E: Binary not found [$IP6T]." ; check_files_retval=1 ; }
	[ -x $IPSET ] || { message "E: Binary not found [$IPSET]." ; check_files_retval=1 ; }
	#[ -x $CONNTRACKD ] || { message "E: Binary not found [$CONNTRACKD]." ; check_files_retval=1 ; }
	[ -x $DIG ] || { message "E: Binary not found [$DIG]" ; check_files_retval=1 ; }

	# Only if neccesary
	if [ "$USE_IPTABLES_CLUSTER" == "yes" ]
	then
		[ -x $IPT_CLUSTER ] || { message "E: Binary not found [$IPT_CLUSTER]." ; check_files_retval=1 ; }
		[ -x $IP6T_CLUSTER ] || { message "E: Binary not found [$IP6T_CLUSTER]." ; check_files_retval=1 ; }
		[ -x $IPSET_CLUSTER ] || { message "E: Binary not found [$IPSET_CLUSTER]." ; check_files_retval=1 ; }
	fi

	return $check_files_retval
}

# string libprogressbar(int i, int max)
# Forked from http://www.brianhare.com/wordpress/2011/03/02/bash-progress-bar/
libprogressbar()
{
        local current=0
        local max=100
        local completed_char="#"
        local uncompleted_char="."
        local decimal=1
        local prefix=" ["
        local suffix="]"
        local percent_sign="%"
        local max_width=55
        local complete remain subtraction width atleast percent chars
        local padding=3

        current=${1:-$current}
        max=${2:-$max}

	# Delete the bar now
	if [ $max -eq $current ]
	then
		printf '%s\r' "                                                       "
		return 0
	fi

        (( padding = padding + decimal + 1 ))

        let subtraction=${#completed_char}+${#prefix}+${#suffix}+padding+${#percent_sign}
        let width=max_width-subtraction

	if (( width < 5 ))
	then
		(( atleast = 5 + subtraction ))
		echo >&2 "libprogressbar: the max_width of ($max_width) is too small, must be atleast $atleast"
		return 1
        fi

	if (( current > max ))
	then
		echo >&2 "libprogressbar: current value must be smaller than max. value"
		return 1
	fi

	percent=$(awk -v "f=%${padding}.${decimal}f" -v "c=$current" -v "m=$max" 'BEGIN{printf('f', c / m * 100)}')
	(( chars = current * width / max))

	# sprintf n zeros into the var named as the arg to -v
	printf -v complete '%0*.*d' '' "$chars" ''
	printf -v remain '%0*.*d' '' "$((width - chars))" ''

	# replace the zeros with the desired char
	complete=${complete//0/"$completed_char"}
	remain=${remain//0/"$uncompleted_char"}

	printf '%s%s%s%s %s%s\r' "$prefix" "$complete" "$remain" "$suffix" "$percent" "$percent_sign"

	if (( current >= max ))
	then
		echo ""
	fi
	return 0
}


################################################################
################################################################
# Datafile functions

# boolean is_ipv4_valid(string ipv4)
# Check if an ipv4 is a valid ipv4
is_ipv4_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		egrep '^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$' <<< $1 > /dev/null
		if [ $? -eq 0 ]
		then
			retval=0
		fi
	fi
	return $retval
}

# boolean is_ipv6_valid(string ipv6)
# Check if an ipv6 is a valid ipv6
is_ipv6_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		egrep -E '^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*$' <<< $1 > /dev/null
		if [ $? -eq 0 ]
		then
			retval=0
		fi
	fi
	return $retval
}

# boolean is_fqdn_valid(string fqdn)
# Check if an fqdn is a valid fqdn
is_fqdn_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		# resolve it to know if it's valid
		local resolution=`$DIG +short $1 2>/dev/null | wc -l 2>/dev/null`
		if [ ! -z "$resolution" ] && [[ $resolution =~ ^[0-9]+$ ]] && [ $resolution -ne 0 ]
		then
			retval=0
		fi
	fi
	return $retval
}

# boolean is_ip_fqdn_valid(string ip_or_fqdn)
# Check if an address is valid (ip or fqdn)
is_ip_fqdn_valid()
{
	local retval=1
	if [ ! -z $1 ]
	then
		# Es posible que tengamos una ipv4, una ipv6 o un fqdn
		is_ipv6_valid $1 && retval=0
		is_ipv4_valid $1 && retval=0
		is_fqdn_valid $1 && retval=0
	fi
	return $retval
}

# boolean is_domain_fqdn(string fqdn)
# Funcion que valora si un fqdn es del dominio cica.es
is_domain_fqdn()
{
	local retval=1
	grep "$DOMAIN"$ <<< $1 > /dev/null
	if [ $? -eq 0 ]
	then
		retval=0
	fi
	return $retval
}



# boolean reload_variable_values()
# Esta funcion recorre todas las variables del sistema, reajustando su valor.
reload_variable_values()
{
	local reload_variable_values_retval=0
	echo -n "" > $AUX_FILE

	message "I: Variables containing the tag \"##ignore##\" are ignored."

	local lista_variables=`{ cat $VARS_IPV4 ; cat $VARS_IPV6 ; } | egrep -v "##ignorar##"\|"##ignore##"\|"@"\|^[[:space:]]*# \
		| awk -F'#' '{print $2}' | sort -u | uniq | grep -v ^[[:space:]]*$`

	oldIFS=$IFS ; IFS=$' \t\n' #control over IFS


	# Evaluating if calcules regarding progress bar are neccesary
	if [ "$USE_PROGRESS_BAR" == "yes" ]
	then
		local total=`wc -w <<< $lista_variables`
		local cont=0
	fi

	for variable in $lista_variables
	do
		# Evaluating if calcules regarding progress bar are neccesary
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			((cont++))
			libprogressbar $cont $total
		fi
		# Solo se mostraran luego los mensajes de error
		add_ip_variable $variable | grep E: >> $AUX_FILE || reload_variable_values_retval=1
	done
	IFS=$oldIFS

	local checklist=`cat $AUX_FILE`
	if [ ! -z "$checklist" ]
	then
		message "I: Check:"
		echo -e "$checklist"
	fi
	return $reload_variable_values_retval
}

# string get_variable_name(string data)
# Used to know what variable name correspond to the given data
get_variable_name()
{
	# Check for empty argument
	if [ -z "$1" ]
	then
		message "E: empty argument in function get_variable_name()."
		do_exit 1
	fi

	# Check if the data is IPv4
	if is_ipv4_valid $1
	then
		# return
		echo v$1 | tr '.' '_'
		return 0
	fi

	# Check if the data is IPv6
	if is_ipv6_valid $1
	then
		# return
		echo v$1 | tr ':' '_'
		return 0
	fi

	# Check if the data is FQDN
	if is_fqdn_valid $1
	then
		local name="$1"
		# if is from $DOMAIN, delete $DOMAIN
		is_domain_fqdn $1 && name=`echo $1 | awk -F".$DOMAIN" '{print $1}'`
		# if starts with a number, starts now with 'v'
		[[ $name =~ ^[0-9] ]] && name="v${name}"
		# and then return
		echo $name | tr [:lower:] [:upper:] | tr '.' '_' | tr '-' '_'
		return 0
	fi

	return 1
}

# ip get_ip_from_fqdn(string tipo_ip, string fqdn, int recursivityLevel)
# recursive function. Used to know the final IP asociated with an FQDN.
get_ip_from_fqdn()
{
        local tipo_ip=$1
        local fqdn=$2
	local recursivityLevel=$3

	[ -z "$tipo_ip" ] && { message "E: En la funcion get_ip_from_fqdn() (recursiva) llamada con parametro tipo_ip vacio." ; do_exit 1 ; }
	[ -z "$fqdn" ] && { message "E: En la funcion get_ip_from_fqdn() (recursiva) llamada con parametro fqdn vacio." ; do_exit 1 ; }
	[ -z "$recursivityLevel" ] && recursivityLevel=0
	[ "$recursivityLevel" -gt 100 ] && { message "E: Max recursion level reached in function get_ip_from_fqdn()." ; do_exit 1 ; }
	((recursivityLevel++))

        local resolution=`$DIG +short $fqdn $tipo_ip`
        if is_ipv6_valid $resolution
        then
                echo "$resolution" #punto de salida
        else
		if is_ipv4_valid $resolution
		then
			echo "$resolution" #punto de salida
		else
			oldIFS=$IFS
			IFS=$' \t\n'
	                for linea in $resolution
	                do
	                        local resolution2="$resolution2 $(get_ip_from_fqdn $tipo_ip $linea $recursivityLevel)"
	                done
			IFS=$oldIFS
	                local resolution3=`echo "$resolution2" | tr [[:space:]] '\n' | grep -v ^[[:space:]]*$ | sort -u | uniq`
	                echo "$resolution3" #punto de salida
		fi
        fi
	return 0
}


# boolean add_ip_variable(string data)
# Used to add a variale to IP datafiles
add_ip_variable()
{
	# trap de cancelacion
	trap " echo "" && message \"W: Interrupt...\" && do_exit 1 " SIGHUP SIGINT SIGTERM SIGKILL SIGTSTP SIGQUIT SIGCONT

	local add_ip_variable_retval=0
	local data_to_add=$1
	local flag_es_ipv4=0
	local flag_es_ipv6=0
	local flag_es_fqdn=0

	if [ -z $data_to_add ]
	then
		# No hay parametro de entrada, usar menu
		read -p "-> Define IPv4, IPv6 or FQDN: " data_to_add
	fi

	#
	# Validacion del dato introducido (por parametro o prompt)
	#

	{ is_ipv4_valid $data_to_add || is_ipv6_valid $data_to_add || is_fqdn_valid $data_to_add ; } \
		|| { message "E: No se ha reconocido en [${data_to_add}] una IP o FQDN que pueda usarse." ; add_ip_variable_retval=1 ; }


	# Procedemos solo si se ha validado el parametro
	if [ $add_ip_variable_retval -eq 0 ]
	then

		#
		# Obtener nombre definitivo que tendra la variable
		#

		variable_name=$( get_variable_name $data_to_add )
		[ $? -ne 0 ] && { message "E: Unable to determine variable name." ; do_exit 1 ; }

		echo "DEBUG: $variable_name=$data_to_add #$data_to_add" > /dev/null

		if grep ^"${variable_name}=" $VARS_IPV4 > /dev/null 2> /dev/null && grep ^"${variable_name}=" $VARS_IPV6 > /dev/null 2> /dev/null
		then
			# La variable ya esta guardada, actualizar
			message "W: Actualizando la variable [${variable_name}]."
		else
			message "I: El nombre de la variable es [${variable_name}]."
		fi

		#
		# Escribir las variables a los ficheros de datos
		#
		guardar_variable_en_fichero "ipv4" "$variable_name" "$data_to_add" \
			|| { message "E: fallo al guardar la variable al fichero [${VARS_IPV4}]" ; add_ip_variable_retval=1 ; }
		guardar_variable_en_fichero "ipv6" "$variable_name" "$data_to_add" \
			|| { message "E: fallo al guardar la variable al fichero [${VARS_IPV6}]" ; add_ip_variable_retval=1 ; }

		#
		# Checkeo de que la escritura ha sido correcta
		#
		grep ^"${variable_name}=" $VARS_IPV4 > /dev/null 2> /dev/null || add_ip_variable_retval=1
		grep ^"${variable_name}=" $VARS_IPV6 > /dev/null 2> /dev/null || add_ip_variable_retval=1
		[ $add_ip_variable_retval -ne 0 ] &&  message "E: No se pudo guardar la variable [${variable_name}]."
	fi
	return $add_ip_variable_retval

}

# Funcion que agrega una variable IPSET al sistema
# Puede ser llamada con o sin parametro de entrada con prompt.
agregar_set()
{
	local agregar_set_retval=0
	local data_to_add=$1

	if [ -z $data_to_add ]
	then
		# No hay parametro de entrada, usar menu
		read -p "-> Definir nombre del conjunto (algo como W_ALL o S_NIS): " data_to_add
	fi

	#
	# Validacion del dato introducido (por parametro o prompt)
	#
	# Mayusculas
	data_to_add=`tr [:lower:] [:upper:] <<< $data_to_add`
	# No debe existir
	( grep -i "${data_to_add}_ipv4" $VARS_IPSETV4 > /dev/null && grep -i "${data_to_add}_ipv6" $VARS_IPSETV6 > /dev/null ) \
		&& { message "E: La variable ya existe." ; agregar_set_retval=1 ; }

	# Procedemos solo si se ha validado el parametro
	if [ $agregar_set_retval -eq 0 ]
	then
		#
		# Escribir las variables a los ficheros de datos
		#
		echo "$data_to_add=`tr [:upper:] [:lower:] <<< $data_to_add`_ipv4" >> $VARS_IPSETV4 \
				|| { message "E: Fallo al escribir la variable en [$VARS_IPSETV4]" ; agregar_set_retval=1 ; }
		echo "$data_to_add=`tr [:upper:] [:lower:] <<< $data_to_add`_ipv6" >> $VARS_IPSETV6 \
				|| { message "E: Fallo al escribir la variable en [$VARS_IPSETV6]" ; agregar_set_retval=1 ; }

		echo "Los datos guardados: "
		grep ^"${data_to_add}=" $VARS_IPSETV4 2>/dev/null
		grep ^"${data_to_add}=" $VARS_IPSETV6 2>/dev/null
	fi

	return $agregar_set_retval
}


# Esta funcion recibe tres parametros: {ipv4|ipv6} {variable} {dato}
# y guarda en el fichero correspondiente
guardar_variable_en_fichero()
{
	local guardar_variable_en_fichero_retval=0
	local ip=$1
	local nombre_variable=$2
	local data_to_add=$3

	if [ -z $nombre_variable ]
	then
		guardar_variable_en_fichero_retval=1
	fi
	if [ -z $data_to_add ]
	then
		guardar_variable_en_fichero_retval=1
	fi
	# Eligiendo el fichero donde trabajaremos
	if [ $ip = "ipv4" ]
	then
		local fichero_trabajo=$VARS_IPV4
	else
		if [ $ip = "ipv6" ]
		then
			local fichero_trabajo=$VARS_IPV6
		else
			guardar_variable_en_fichero_retval=1
		fi
	fi
	# Punto de salida
	if [ $guardar_variable_en_fichero_retval -ne 0 ]
	then
		message "E: Fallo al llamar a la funcion [guardar_variable_en_fichero()] Parametros de entrada invalidos."
		return $guardar_variable_en_fichero_retval
	fi

	# Borrando posible dato anterior
	if grep ^"${nombre_variable}=" $fichero_trabajo > /dev/null
	then
		local datos=`grep -v ^"${nombre_variable}=" $fichero_trabajo | grep -v ^[[:space:]]*$`
		echo "$datos" > $fichero_trabajo
		[ $? -ne 0 ] && { message "E: Fallo al borrar el dato anterior en la actualizacion. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
	fi

	[ $guardar_variable_en_fichero_retval -ne 0 ] && return $guardar_variable_en_fichero_retval # punto de retorno

	# Como guardar los datos si estamos trabajando con un FQDN
	if is_fqdn_valid $data_to_add
	then
		case "$ip" in
			"ipv4" )
				#tirar del hilo
				local resolution="$(get_ip_from_fqdn A $data_to_add 0)"
				;;
			"ipv6" )
				#tirar del hilo
				local resolution="$(get_ip_from_fqdn AAAA $data_to_add 0)"
				;;
		esac
		if [ -z "$resolution" ]
		then
			# No hay resolution DNS para este registro
			echo "${nombre_variable}=\$VOID #$data_to_add" >> $fichero_trabajo
			[ $? -ne 0 ] && { message "E: Fallo al agregar dato [${data_to_add}] ficticio a [$fichero_trabajo]. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
		else
			# Hay resolution DNS para el registro
			if [ `echo "$resolution" | wc -l` -gt 1 ]
			then
				# resolution compleja de este registro
				echo "${nombre_variable}=${data_to_add} #$data_to_add" >> $fichero_trabajo
				[ $? -ne 0 ] && { message "E: Fallo al agregar dato [${data_to_add}] de resolution compleja a [$fichero_trabajo]. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
			else
				# resolution normal de este registro
				echo "${nombre_variable}=$resolution #$data_to_add" >> $fichero_trabajo
				[ $? -ne 0 ] && { message "E: Fallo al agregar dato [${data_to_add}] de resolution normal a [$fichero_trabajo]. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
			fi
		fi
	else # dato de IP cruda (v4 o v6)
		# Como guardar los datos si estamos trabajando con una IPv6
		if is_ipv6_valid $data_to_add
		then
			case "$ip" in
				"ipv4" )
					echo "${nombre_variable}=\$VOID #$data_to_add" >> $fichero_trabajo
					[ $? -ne 0 ] && { message "E: Fallo al agregar dato [${data_to_add}] ficticio a [$fichero_trabajo]. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
					;;
				"ipv6" )
					echo "${nombre_variable}=${data_to_add} #$data_to_add" >> $fichero_trabajo
					[ $? -ne 0 ] && { message "E: Fallo al agregar dato [${data_to_add}] ficticio a [$fichero_trabajo]. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
					;;
			esac
		else
			# Como guardar los datos si estamos trabajando con una IPv4
			if is_ipv4_valid $data_to_add
			then
				case "$ip" in
					"ipv4" )
						echo "${nombre_variable}=${data_to_add} #$data_to_add" >> $fichero_trabajo
						[ $? -ne 0 ] && { message "E: Fallo al agregar dato [${data_to_add}] ficticio a [$fichero_trabajo]. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
						;;
					"ipv6" )
						echo "${nombre_variable}=\$VOID #$data_to_add" >> $fichero_trabajo
						[ $? -ne 0 ] && { message "E: Fallo al borrar el dato anterior en la actualizacion. Posible perdida de datos." ; guardar_variable_en_fichero_retval=1 ; }
						;;
				esac
			else
				message "E: Funcion [guardar_datos_a_ficheros()] mal llamada: El dato no se ha detectado como valido."
				guardar_variable_en_fichero_retval=1
			fi
		fi
	fi
	return $guardar_variable_en_fichero_retval
}

################################################################
################################################################
# Utilities functions

# boolean stats()
# Print stats to stdout.
stats()
{
	local retval=0

	# Info iptables
	echo -e "### About iptables  \tIPv4\tIPv6\ttotal"
	local num_of_ipv4_rules=`$IPT_SAVE 2>/dev/null | grep ^- 2>/dev/null | wc -l`
	local num_of_ipv6_rules=`$IP6T_SAVE 2>/dev/null | grep ^- 2>/dev/null | wc -l`
	local num_of_ipv4_rules_nomatch=`$IPT_SAVE -c 2>/dev/null | grep ^"\[0:0\]" | wc -l`
	local num_of_ipv6_rules_nomatch=`$IP6T_SAVE -c 2>/dev/null | grep ^"\[0:0\]" | wc -l`

	[[ $num_of_ipv4_rules =~ ^[0-9]+$ ]] || num_of_ipv4_rules=0
	[[ $num_of_ipv6_rules =~ ^[0-9]+$ ]] || num_of_ipv6_rules=0
	[[ $num_of_ipv4_rules_nomatch =~ ^[0-9]+$ ]] || num_of_ipv4_rules_nomatch=0
	[[ $num_of_ipv6_rules_nomatch =~ ^[0-9]+$ ]] || num_of_ipv6_rules_nomatch=0

	echo -e " Rules with match: \t $(( num_of_ipv4_rules - num_of_ipv4_rules_nomatch)) \t $(( num_of_ipv6_rules - num_of_ipv6_rules_nomatch )) \t $(( num_of_ipv4_rules + num_of_ipv6_rules - num_of_ipv4_rules_nomatch - num_of_ipv6_rules_nomatch))"
	echo -e " Rules not in use: \t $num_of_ipv4_rules_nomatch \t $num_of_ipv6_rules_nomatch \t $(( num_of_ipv4_rules_nomatch + num_of_ipv6_rules_nomatch))"
	echo -e " Amount of rules: \t $num_of_ipv4_rules \t $num_of_ipv6_rules \t $(( num_of_ipv4_rules + num_of_ipv6_rules ))"
	echo " Use and default policy IPv4:"
	$IPT -n -L -v 2>/dev/null | grep policy | while read linea
	do
		echo -e "\t$linea"
	done
	echo " Use and default policy IPv6:"
	$IP6T -n -L -v 2>/dev/null | grep policy | while read linea
	do
		echo -e "\t$linea"
	done
	echo " Hash of the ruleset: `( { $IPT_SAVE 2>/dev/null ; $IP6T_SAVE 2>/dev/null; } | grep ^"-" | md5sum | awk -F' ' '{print $1}' ) || echo error! `"

	echo ""

	# Info ipset
	echo -e "### About ipset \tIPv4\tIPv6\ttotal"
	local num_of_ipset_ipv4=`$IPSET list 2>/dev/null | grep "family inet " | wc -l`
	local num_of_ipset_ipv6=`$IPSET list 2>/dev/null | grep "family inet6" | wc -l`

	[[ $num_of_ipset_ipv4 =~ ^[0-9]+$ ]] || num_of_ipset_ipv4=0
	[[ $num_of_ipset_ipv6 =~ ^[0-9]+$ ]] || num_of_ipset_ipv6=0

	local num_of_ipset_ipv4_nomatch=`$IPSET list 2>/dev/null | grep "family inet " | grep "References: " | grep -v "References: 0" | wc -l`
	local num_of_ipset_ipv6_nomatch=`$IPSET list 2>/dev/null | grep "family inet6" | grep "References: " | grep -v "References: 0" | wc -l`

	[[ $num_of_ipset_ipv4_nomatch =~ ^[0-9]+$ ]] || num_of_ipset_ipv4=0
	[[ $num_of_ipset_ipv6_nomatch =~ ^[0-9]+$ ]] || num_of_ipset_ipv6=0

	echo -e " Sets used by kernel: \t $(( num_of_ipset_ipv4 - num_of_ipset_ipv4_nomatch )) \t $(( num_of_ipset_ipv6 - num_of_ipset_ipv6_nomatch)) \t $(( num_of_ipset_ipv4 + num_of_ipset_ipv6 - num_of_ipset_ipv6_nomatch - num_of_ipset_ipv4_notmach ))"
	echo -e " Sets not used: \t $(( num_of_ipset_ipv4_nomatch )) \t $(( num_of_ipset_ipv6_nomatch )) \t $(( num_of_ipset_ipv4_nomatch + num_of_ipset_ipv6_nomatch ))"
	echo -e " Sets in kernel: \t $num_of_ipset_ipv4 \t $num_of_ipset_ipv6 \t $(( num_of_ipset_ipv4 + num_of_ipset_ipv6 ))"

	echo ""


	# Info variables
	echo -e "### Other data\t\t\tIPv4\tIPv6"
	local vars_ipv4=`grep \= $VARS_IPV4 2>/dev/null | wc -l`
	local vars_ipv6=`grep \= $VARS_IPV6 2>/dev/null | wc -l`
	local vars_ipset_ipv4=`grep \= $VARS_IPSETV4 2>/dev/null | wc -l`
	local vars_ipset_ipv6=`grep \= $VARS_IPSETV6 2>/dev/null | wc -l`
	echo -e " Declared iptables variables:\t $vars_ipv4 \t $vars_ipv6"
	echo -e " Declared ipset variables:\t $vars_ipset_ipv4 \t $vars_ipset_ipv6"
	echo ""

	[[ $MINIMAL_AMOUNT_OF_RULES =~ ^[0-9]+$ ]] || MINIMAL_AMOUNT_OF_RULES=40
	if [ $num_of_ipv4_rules -gt $MINIMAL_AMOUNT_OF_RULES ] || [ $num_of_ipv6_rules -gt $MINIMAL_AMOUNT_OF_RULES ]
	then
		echo " The firewall appears to be up and running (More than $MINIMAL_AMOUNT_OF_RULES rules in kernel). [fw up]"
	else
		echo " The firewall appears to be down (Less than $MINIMAL_AMOUNT_OF_RULES rules in kernel). [fw down]"
	fi

	if [ $vars_ipset_ipv4 -ne $vars_ipset_ipv6 ] || [ $vars_ipv4 -ne $vars_ipv6 ]
	then
		message " W: Please run \`fw-admin --check-datafiles' to know about datafile corruptions."
	fi

	return $retval

}

# boolean check_datafile_format(string filename)
# Check the format of a datafile
check_datafile_format()
{
	local retval=0
	# Format 1
	# #comments
	# VARIABLE=data #comment
	# VAR1ABl3= data #comment
	# blankline
	# #comments
	# VARIABLe= d4t4  ##comment

	# Format 2
	# #comments
	# VARIABLE=d4t4
	# VAR1ABLe=data
	# blankline
	# #comments
	# VARIABLE= data

	if [ ! -z "$1" ] && [ -e $1 ]
	then
		if [ "$2" == "2" ]
		then
			# format 2 without trailing comment

			# invalid lines
			local invalid_lines=`\
				cat $1 | nl -ba \
				| egrep -vE ^[[:space:]]*[0-9]+[[:space:]]+"#"\|^[[:space:]]*[0-9]+[[:space:]]*$\|^[[:space:]]*[0-9]+[[:space:]]\{1}[A-Za-z].*=+.*`
		else
			# format 1 default, with trailing comment
			# invalid lines
			local invalid_lines=`\
				cat $1 | nl -ba \
				| egrep -vE ^[[:space:]]*[0-9]+[[:space:]]+"#"\|^[[:space:]]*[0-9]+[[:space:]]*$\|^[[:space:]]*[0-9]+[[:space:]]\{1}[A-Za-z].*=+.*[[:space:]]+#.*$`
		fi
		if [ ! -z "$invalid_lines" ]
		then
			retval=1
			message "W: Check invalid lines detected in file ${1}:"
			echo -e "  Line  Content"
			echo "$invalid_lines"

		fi
	else
		message "E: Function check_datafile_format() called with bad arguments."
		do_exit 1
	fi
	return $retval
}

# boolean check_datafile_sanity(string filename1, string filename2)
# Check if all variables are the same in both files
check_datafile_sanity()
{
	local retval=0
	local AUX_FILE2="`mktemp`"


	if [ -z "$1" ] || [ -z "$2" ]
	then
		message "E: Function check_datafile_sanity() called without arguments."
		do_exit 1
	fi

	if [ ! -r "$1" ] || [ ! -r "$2" ]
	then
		message "E: Unable to read $1 or $2."
		do_exit 1
	fi

	egrep -v ^[[:space:]]*#\|^[[:space:]]*$ $1 | awk -F'=' '{print $1}' | sort -n > $AUX_FILE
	egrep -v ^[[:space:]]*#\|^[[:space:]]*$ $2 | awk -F'=' '{print $1}' | sort -n > $AUX_FILE2
	result=`diff $AUX_FILE $AUX_FILE2`
	if [ ! -z "$result" ]
	then
		retval=1
		if [[ "$result" =~ ">" ]]
		then
			message "W: Missing variables in $1 from $2"
			grep ">" <<< "$result"
		fi
		if [[ "$result" =~ "<" ]]
		then
			message "W: Missing variables in $2 from $1"
			grep "<" <<< "$result"
		fi
	fi
	rm -rf $AUX_FILE2 2>/dev/null
	return $retval
}

# boolean check_datafiles()
# Check what variables are missing in what datafiles and the format is correct.
check_datafiles()
{
	local retval=0

	# Checking format 1: trailing comment
	check_datafile_format $VARS_IPV4 1 || retval=$?
	check_datafile_format $VARS_IPV6 1 || retval=$?
	# Checking format 2: no trailing comment
	check_datafile_format $VARS_IPSETV4 2 || retval=$?
	check_datafile_format $VARS_IPSETV6 2 || retval=$?

	# Checking sanity
	check_datafile_sanity $VARS_IPV4 $VARS_IPV6 || retval=$?
	check_datafile_sanity $VARS_IPSETV4 $VARS_IPSETV6 || retval=$?

	return $retval
}

# boolean get_information(string data)
# Search for information in datafiles, sets and iptables
get_information()
{
	oldIFS=$IFS ; IFS=$' \t\n' # Control over IFS

	local get_information_retval=1
        local data=$1
	echo -n "" > $AUX_FILE

        if [ -z "$data" ]
        then
                # No hay parametro de entrada, usar menu
                read -p "-> Define IPv4, IPv6 or FQDN: " data
        fi


	# 1Âº Search the data just typed
	search_datafiles $data $AUX_FILE


	# 2Âº Search the variable name the data should has
	variable_name=$( get_variable_name $data )
	if [ $? -ne 0 ] || [ -z "$variable_name" ]
	then
		message "E: Unable to determine variable name (Maybe FQDN not found in DNS servers, or invalid IPv4|IPv6)."
		do_exit 1
	fi
	search_datafiles $variable_name $AUX_FILE


	# 3Âº Search only if previous data has been found.
	# Search in base a previous data found
	#
	# Take care of the message format produced by function search_datafiles()
	# "Related data found in ${C_BOLD}$VARS_IPV4${C_NORMAL}: ${C_BOLD}${line}${C_NORMAL}" #--> ' VAR=dato #aclaracion'
	if [ `cat $AUX_FILE | wc -l` -gt 0 ]
	then

		# Search after comment (#)
		local new_data_searh_list=`cat $AUX_FILE | awk -F'#' '{print $2}' | awk -F' ' '{print $1}' | sort -u | uniq `
		for i in $new_data_search_list
		do
			search_datafiles $i $AUX_FILE
		done
		# Search behind (=)
		local new_data_search_list=`cat $AUX_FILE | awk -F' ' '{print $6}' | awk -F'=' '{print $1}' | sort -u | uniq`
		for i in $new_data_search_list
		do
			search_datafiles $i $AUX_FILE
		done
		# Seach after (=)
		local new_data_search_list=`cat $AUX_FILE | awk -F'=' '{print $2}' | awk -F'#' '{print $1}' | sort -u | uniq`
		for i in $new_data_search_list
		do
			if [ "$i" != "\$VOID" ] || [ "$i" != "\$VOID" ]
			then
				search_datafiles $i $AUX_FILE
			fi
		done
	fi

	# Querying now ipset

	local list_of_sets_with_match=""
	local flag_set_added=0
	local set_list=`$IPSET -L | grep "Name:" | awk -F' ' '{print $2}' | grep -v ^[[:space:]]*$`
	for sset in $lista_sets
	do
		if $IPSET -T $sset $data > /dev/null 2> /dev/null
		then
			list_of_sets_with_match="$list_of_sets_with_match $sset"
			flag_set_added=1
		fi
		if ! $flag_set_added
		then
	                # Searching with data behind # from data already found
			for data in `cat $AUX_FILE | awk -F'#' '{print $2}' | awk -F' ' '{print $1}' | sort -u | uniq`
			do
				if $IPSET -T $un_set $data
				then
					list_of_sets_with_match="$list_of_sets_with_match $sset"
					flag_set_added=1
				fi
			done
		fi
		if ! $flag_set_added
		then
			# Seach with data after (=) from data already found
			for data in `cat $AUX_FILE | awk -F'=' '{print $2}' | awk -F'#' '{print $1}' | sort -u | uniq`
			do
				if $IPSET -T $un_set $data
				then
					list_of_sets_with_match="$list_of_sets_with_match $sset"
				fi
			done
		fi
	done

	# Show or not sets where data was found
	if [ ! -z "$list_of_sets_with_match" ]
	then
		# Fix for printing
		list_of_sets_witch_match=`echo $list_of_sets_with_match | tr ' ' '\n' | grep -v ^[[:space:]]*$ | sort -u | uniq | tr '\n' ' '`
		echo -e "I: Data ${C_BOLD}$data${C_NORMAL} is in set(s): ${list_of_sets_with_match}" >> $AUX_FILE
		flag_data_shown=1
	fi


	#########################################################
	# Ordenando y mostrando los datos que tenemos hasta ahora
	if [ `cat $AUX_FILE | wc -l` -gt 0 ]
	then
		flag_data_shown=1
		cat $AUX_FILE | sort -u | while read linea
		do
			message "$linea"
		done
	fi

	echo -n "" > $AUX_FILE
	# Si habia set coincidente, mostrar ahora las reglas para ese set
	if [ ! -z "$lista_de_set_con_coincidencias" ]
	then
		message "I: Reglas que hacen referencias a los sets relacionados:"
		oldIFS=$IFS ; IFS=$' '
		for i in $lista_de_set_con_coincidencias
		do
			$IPT_SAVE -c | grep "match\-set" | grep "$i" >> $AUX_FILE
			$IP6T_SAVE -c | grep "match\-set" | grep "$i" >> $AUX_FILE
		done
		IFS=$oldIFS
		cat $AUX_FILE | sort -u | uniq
		local total_reglas=`cat $AUX_FILE | wc -l`
	fi

	# Realizar la consulta a iptables
	local consulta_iptables=`grep -i $data $VARS_IPV4 | grep -v VOID | awk -F'=' '{print $2}' | awk -F'#' '{print $1}' | tr -d [:space:]` #obtener valor
	if is_ipv4_valid $consulta_iptables
	then
		local num_reglas_ipv4_nat=`$IPT_SAVE -t nat | grep "$consulta_iptables" | wc -l`
		if [ $num_reglas_ipv4_nat -gt 0 ]
		then
			message "I: Reglas en IPv4 (nat): $num_reglas_ipv4_nat"
			$IPT_SAVE -c -t nat | grep $consulta_iptables && flag_data_shown=true
		fi
		local num_reglas_ipv4=`$IPT_SAVE | grep "$consulta_iptables" | wc -l`
		if [ $num_reglas_ipv4 -gt 0 ]
		then
			message "I: Reglas en IPv4: $num_reglas_ipv4"
			$IPT_SAVE -c | grep $consulta_iptables && flag_data_shown=true
		fi
	else
		num_reglas_ipv4=0
		num_reglas_ipv4_nat=0
	fi
	# Volvemos a realizar la consulta a iptables, en este caso buscando nateo
	consulta_iptables=`grep $data $VARS_IPV6 | awk -F'=' '{print $2}' | awk -F'#' '{print $1}' | tr -d [:space:]` #obtener valor
	if is_ipv6_valid $consulta_iptables
	then
		local num_reglas_ipv6=`$IP6T_SAVE | grep "$consulta_iptables" | wc -l`
		if [ $num_reglas_ipv6 -gt 0 ]
		then
			message "I: Reglas en IPv6: $num_reglas_ipv6"
			$IP6T_SAVE -c | grep $consulta_iptables
			flag_data_shown=true
		fi
	else
		num_reglas_ipv6=0
	fi

	total_reglas=$((num_reglas_ipv4_nat + total_reglas))
	total_reglas=$(( total_reglas + num_reglas_ipv4 ))
	total_reglas=$(( total_reglas + num_reglas_ipv6 ))
	message "I: Se han encontrado un total de ${C_BOLD}${total_reglas}${C_NORMAL} reglas coincidentes."


	if [ "$flag_data_shown" != "true" ]
	then
		message "W: No se ha encontrado ninguna informacion relacionada."
	else
		obtener_informacion_retval=0
	fi
	echo "DEBUG: $obtener_informacion_retval" > /dev/null
	IFS=$oldIFS
	return $obtener_informacion_retval
}

# boolean search_datafiles(string data, string result_return_file)
# This function search for data in datafiles and return results to a file
search_datafiles()
{
	local search_datafiles_retval=1
	local data=$1 #dato a buscar
	local result_return_file=$2 #fichero al que escribir mensaje en caso de acierto

	if [ ! -z "$data" ] && [ -e "$result_return_file" ]
	then

		oldIFS=$IFS ; IFS=$'\n' # control over IFS

		local aux_data=`tr '.' '_' <<< $data | tr '-' '_'`
		for line in `egrep -i ="$data"[[:space:]]\|"#""$data"\|"$data"[[:space:]]*"="\|"$aux_data"[[:space:]]*"=" $VARS_IPV4 2>/dev/null`
		do
			search_datafiles_retval=0
			# WARNING! If you change this message, you must change also the function get_information()
			echo -e "Related data found in ${C_BOLD}$VARS_IPV4${C_NORMAL}: ${line}" >> $2
		done
		for line in `egrep -i ="$data"[[:space:]]\|"#""$data"\|"$data"[[:space:]]*"="\|"$aux_data"[[:space:]]*"=" $VARS_IPV6 2>/dev/null`
		do
			search_datafiles_retval=0
			# WARNING! If you change this message, you must change also the function get_information()
			echo -e "Related data found in ${C_BOLD}$VARS_IPV6${C_NORMAL}: ${line}" >> $2
		done
	else
		message "E: Function search_datafiles() called with bad arguments."
		do_exit 1
	fi

	return $search_datafiles_retval
}


# boolean check_iptables_syntax_loop(string file_being_checked, int protocol)
# Loop over a file checking iptables syntax. Protocol: 4|6
check_iptables_syntax_loop()
{

	local check_iptables_syntax_loop_retval=0
	echo -n "" > $AUX_FILE

	# Validations
	[ ! -r "$1" ] && { message "E: Function check_iptables_syntax_loop() called with an unreadable filename as argument." ; return 1 ;}
	[ "$2" != "4" ] && [ "$2" != "6" ] && { message "E: Function check_iptables_syntax_loop() called with bad protocol as argument." ; return 1 ; }

	# Using a more legible name
	local file_being_checked=$1
	local protocol=$2

	# Evaluating if we need calcules regarding progress bar
	if [ "$USE_PROGRESS_BAR" == "yes" ]
	then
		local amount_of_lines=`grep -v ^[[:space:]]*# $file_being_checked | egrep "IPT -A "\|"IPT -I " | grep -v ^[[:space:]]*$ | wc -l`
		local cont=0
	fi

	for line in `cat $file_being_checked | nl -b a | egrep -v ^[[:space:]]*[0-9]*[[:space:]]*"#"\|^[[:space:]]*[0-9]*[[:space:]]$\|"IPSET" | egrep "IPT -A "\|"IPT -I "`
	do
		# Evaluating if we need calcules regarding progress bar
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			((cont++))
			libprogressbar $cont $amount_of_lines
		fi

		# Preparing the line to be evaluated.

		# 1Âº Delete the number of the line
		local ejec=`awk -F' ' '{$1=""}1' <<< ${line}`
		# 2Âº Change -I to -C
		ejec=${ejec/"IPT -I "/"IPT -C "}
		# 3Âº Change -A to -C
		ejec=${ejec/"IPT -A "/"IPT -C "}

		# Evaluating now
		error_msg=$( eval "${ejec} 2>&1" 2>&1 ) # error_msg must be a global variable for this trick to work
		if [ $? -eq 2 ]
		then
			message "W: The rule in line \"`awk -F' ' '{print $1}' <<< $line`\" failed the check in IPv${protocol}." >> $AUX_FILE
			echo "Details:" >> $AUX_FILE
			awk -F' ' '{$1=""}1' <<< ${line} >> $AUX_FILE
			# add a space to improve reading by the admin
			for error_line in $error_msg
			do
				echo " $error_line" >> $AUX_FILE
			done
			check_iptables_syntax_loop_retval=1
		fi
	done

	grep -v ^[[:space:]]*$ $AUX_FILE >&2

	return $check_iptables_syntax_loop_retval
}

# Recibe un fichero
check_iptables_syntax()
{
	# Doing nothing
	[ "$FORMAT" == "restore" ] && return 0

	local check_iptables_syntax_retval=0
	local fichero=$1

	if [[ "$fichero" =~ ^"core"$ ]] || [[ "$fichero" =~ /"core"$ ]] || [[ "$fichero" =~ ^"sets"$ ]] || [[ "$fichero" =~ /"sets"$ ]]
	then
		# Doing nothing
		return 0
	fi


	echo "" > $AUX_FILE

	# punto de salida
	if [ ! -r $fichero ]
	then
		message "E: No se ha recibido un nombre de fichero correcto en la funcion check_iptables_syntax(). Terminando..."
		return 1
	fi

	oldIFS=$IFS
	IFS=$'\n'
	message "I: Checking iptables syntax [$fichero]"
	source $VARS_IPV4 && source $VARS_IPSETV4 && { IPT=$IPT_LOCAL ; IPSET=$IPSET_LOCAL ; } \
	|| { message "E: Unable to load datafiles in IPv4." ; return 1 ; } # punto de salida

	check_iptables_syntax_loop $fichero 4 || check_iptables_syntax_retval=1

	# Si es fichero de nat, no comprobar IPv6
	if grep -i nat <<< $fichero > /dev/null
	then
		echo "DEBUG: No IPv6 syntax check because NAT." > /dev/null
	else
		message "I: Checking ip6tables syntax [$fichero]"
		source $VARS_IPV6 && source $VARS_IPSETV6 && { IPT=$IP6T_LOCAL ; IPSET=$IPSET_LOCAL ; } \
		|| { message "E: Unable to load datafiles in IPv6." ; return 1 ; } # punto de salida

		check_iptables_syntax_loop $fichero 6 || check_iptables_syntax_retval=1
	fi
	IFS=$oldIFS
	return $check_iptables_syntax_retval
}

# boolean check_rulefile(string file_to_check)
# To check that variables of a rulefile are in datafiles and ip[6]?tables syntax
check_rulefile()
{
	[ ! -z "$flag_no_check" ] && [ $flag_no_check -eq 1 ] && { message "W: No check [$1]." ; return 0 ; }

	local check_rulefile_retval=0
	local flag_wrong_variables=0
	local flag_wrong_iptables=0
	local file_to_check=$1
	echo "" > $AUX_FILE

	if [ ! -z "$file_to_check" ] && [ -e "$file_to_check" ]
	then
		message "I: Checking variables of file [$file_to_check]"

		oldIFS=$IFS ; IFS=$' \t\n' # control over IFS

		# Do we need to do calcules related to progress bar?
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			local amount=`grep -v ^[[:space:]]*# $file_to_check | tr [[:space:]] '\n' | fgrep \$ | egrep -v "IPT"$\|"IPSET"$\|^[[:space:]]*$ | sort -u | wc -l`
			local cont=0
		fi

		# Iterate over variables ($FOO) on file
		for word in `grep -v ^[[:space:]]*# $file_to_check | tr [[:space:]] '\n' | fgrep \$ | egrep -v "IPT"$\|"IPSET"$\|^[[:space:]]*$ | sort -u`
		do
			# Do we need to do calcules related to progress bar?
			if [ "$USE_PROGRESS_BAR" == "yes" ]
			then
		                ((cont++))
	        	        libprogressbar $cont $amount
			fi

			# If the word is IPT|IPSET|iptables|ip6tables, do nothing and continue
			{ [[ "$word" =~ "IPT" ]] || [[ "$word" =~ "IPSET" ]] || [[ "$word" =~ "ip"[6]?"tables" ]] ; } && continue

			# If not, look for the word in datafiles
			local search=`echo $word | tr -d '$'`

			# the search. Must be in both datafiles of the same type to consider the variable valid.
			if ! { grep ^[[:space:]]*"$search"=.*$ $VARS_IPV4 > /dev/null && grep ^[[:space:]]*"$search"=.*$ $VARS_IPV6 > /dev/null ; }
			then
				if ! { grep ^[[:space:]]*"$search"=.*$ $VARS_IPSETV4 > /dev/null && grep ^[[:space:]]*"$search"=.*$ $VARS_IPSETV6 > /dev/null ; }
				then
					message "W: Check variable ${C_BOLD}${search}${C_NORMAL}" >> $AUX_FILE
					flag_wrong_variables=1
				fi
			fi
		done
		IFS=$oldIFS

		# Showing warnings now
		grep -v ^[[:space:]]*$ $AUX_FILE

		[ $flag_wrong_variables -ne 0 ] && return 1 # return point


		# Check iptables syntax if all variables all fine
		check_iptables_syntax $file_to_check || flag_wrong_iptables=$?

		[ "$flag_wrong_variables" -ne 0 ] || [ "$flag_wrong_iptables" -ne 0 ] && check_rulefile_retval=1

	else
		message "E: File not found [$file_to_check]."
		check_rulefile_retval=1
	fi
	return $check_rulefile_retval
}

# boolean check_chain_exist(string chainname)
# Check if a chain is create in iptables/6tables
check_chain_exist()
{
	local check_table_exist_retval=1

	# validating
	[ -z "$1" ] && return 1

	# core, sets, nat doesn't require chain
	[[ $1 =~ ^"core"$|^"sets"$|^"nat"$ ]] && return 0

	if $IPT_SAVE | grep ^: | grep $1 >/dev/null 2>/dev/null
	then
		if $IP6T_SAVE | grep ^: | grep $1 >/dev/null 2>/dev/null
		then
			check_table_exist_retval=0
		fi
	fi

	return $check_table_exist_retval
}

################################################################
################################################################
# Operations functions

# void start_controlled_exit()
# To be used inside traps.
start_controlled_exit()
{
	echo ""
	# Behaviour when aborting start operation
	#FLUSH_WHEN_ABORT_START="yes"

	if [ "$FLUSH_WHEN_ABORT_START" == "yes" ]
	then
		message "W: Aborting the start operation for ${1} and flushing rules."
		flush_vlan $1
	else
		message "W: Aborting the start operation for ${1}."
	fi
	do_exit 1
}

# boolean start_in_script_format(string vlan)
# Check&start rules on vlan
start_in_script_format()
{

	local start_retval=0
	local initial_time=`date +%s`

	# Check input parameter
	if [ -z "$1" ]
	then
		message "E: A name as an argument (corresponding to something in ${CONF_DIR}) is needed."
		do_exit 1 # EXIT POINT
	else
		local vlan=$1
		if [ ! -x "$CONF_DIR/$vlan" ]
		then
			message "E: File not found."
			do_exit 1 # EXIT POINT
		fi
	fi

	# Check that given chain exist
	if ! check_chain_exist $vlan
	then
		message "E: Given chain doesn't exist."
		do_exit 1 # EXIT POINT
	fi

	# Trap de seguridad para la salida
	trap "start_controlled_exit $vlan" SIGHUP SIGINT SIGTERM SIGKILL SIGTSTP SIGQUIT SIGCONT

	# Checking rulefile.
	if ! check_rulefile $CONF_DIR/$vlan
	then
		message "E: Check failed. Don't starting."
		do_exit 1 # Exit point
	fi

	# Deletin previous rules
	if ! flush_vlan $vlan
	then
		message "E: Error flushing vlan."
		do_exit 1 # Exit point
	fi


	# Starting IPv4 rules
	message "I: Starting IPv4 rules."
	oldIFS=$IFS ; IFS=$'\n' # control over IFS

	# Start the for loop only if success loading datafiles and flushing vlan
	if source $VARS_IPV4 && source $VARS_IPSETV4
	then
		start_loop $vlan 4 || start_retval=$?
	else
		message "E: Error loading datafiles in IPv4."
		if [ "$FLUSH_WHEN_ERROR_START" == "yes" ]
		then
			flush_vlan $vlan
		fi
		do_exit 1 # EXIT POINT
	fi
	log_vlan $vlan || { message "E: Unable to insert LOGGING and RETURN rules in IPv4 for [$vlan]." ; do_exit 1 ; } # EXIT POINT


	if grep -i nat <<< $vlan > /dev/null
	then
		echo "DEBUG: Not inserting rules in IPv6 because a nat file" > /dev/null
	else
		# Iniciando reglas en IPv6
		message "I: Starting IPv6 rules."
		oldIFS=$IFS ; IFS=$'\n' # control over IFS

		# Start the for loop only if success loading datafiles
		if source $VARS_IPV6 && source $VARS_IPSETV6
		then
			start_loop $vlan 6 || start_retval=$?
		else
			message "E: Error loading datafiles in IPv6."
			if [ "$FLUSH_WHEN_ERROR_START" == "yes" ]
			then
				flush_vlan $vlan
			fi
			do_exit 1 # EXIT POINT
		fi
		log_vlan $vlan || { message "E: Unable to insert LOGGING and RETURN rules in IPv6 for [$vlan]." ; do_exit 1 ; } # EXIT POINT
	fi
	IFS=$oldIFS
	local final_time=`date +%s`
	message "I: Operation time over ${vlan}: $(( final_time - initial_time )) seconds."

	return $start_retval
}

# boolean start_loop(string vlan_file, integer protocol)
# Iterate over rulefile inserting rules in kernel
start_in_script_format_loop()
{
	local start_loop_retval=0

	local vlan=$1
	local protocol=$2

	if [ -z "$vlan" ] || [ ! -e "$CONF_DIR/$vlan" ] || [ -z "$protocol" ]
	then
		message "E: Invalid call to function start_in_script_format_loop(), invalid input arguments."
	fi


	# Evaluating if we need calcules related to the progress bar
	if [ "$USE_PROGRESS_BAR" == "yes" ]
	then
		local amount_of_lines=`grep -v ^[[:space:]]*# $CONF_DIR/$vlan | grep -v ^[[:space:]]*$ | wc -l`
	fi
	local cont=0

	for line in `grep -v ^[[:space:]]*# $CONF_DIR/$vlan | grep -v ^[[:space:]]*$`
	do
		((cont++))
		# Evaluating if we need calcules related to the progress bar
		[ "$USE_PROGRESS_BAR" == "yes" ] && [ -z "$flag_no_check" ] && libprogressbar $cont $amount_of_lines

		# Insert the rule in kernel and evaluate return code
		error_msg=$( eval "${line} 2>&1" 2>&1 ) # error_msg must be a global variable for this trick to work
		if [ $? -ne 0 ]
		then
			start_loop_retval=1
			message "E: Error found adding rules to kernel in IPv${protocol}. Rule num (not line) [$cont]."
			echo "Details:"
			echo " ${line}"
			for error_line in $error_msg
			do
				echo " $error_line"
			done

			# Behaviour when error at start operation
			#FLUSH_WHEN_ERROR_START="no"

			if [ "$FLUSH_WHEN_ERROR_START" == "yes" ]
			then
				message "W: Flushing rules of $vlan ..."
				flush_vlan $vlan
				do_exit 1 # EXIT POINT
			fi
		fi
	done
	return $start_loop_retval
}


flush_vlan()
{
	local flush_vlan_retval=0
	# Recibe como parametro una vlan o nat
	if [ ! -z "$1" ]
	then
		if grep -i ^"core" <<< $1 > /dev/null
		then
			if [ "$USE_IPTABLES_CLUSTER" == "yes" ]
			then
				# USING iptables-cluster

				# Flushing entire firewall
				$IPT_CLUSTER -F 2>/dev/null || flush_vlan_retval=1
				$IPT_CLUSTER -F -t nat 2>/dev/null || flush_vlan_retval=1
				$IPT_CLUSTER -X 2>/dev/null || flush_vlan_retval=1
				$IP6T_CLUSTER -F 2>/dev/null || flush_vlan_retval=1
				$IP6T_CLUSTER -X 2>/dev/null || flush_vlan_retval=1

				# Flushing SETS
				$IPSET_CLUSTER flush 2>/dev/null || flush_vlan_retval=1
				$IPSET_CLUSTER x 2>/dev/null || flush_vlan_retval=1

				if [ "$PERMISSIVE_TRAFFIC_WHEN_STOP" == "yes" ]
				then
					$IPT_CLUSTER -P INPUT ACCEPT 2>/dev/null
					$IPT_CLUSTER -P OUTPUT ACCEPT 2>/dev/null
					$IPT_CLUSTER -P FORWARD ACCEPT 2>/dev/null
					$IPT_CLUSTER -A FORWARD -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IPT_CLUSTER -A INPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IPT_CLUSTER -A OUTPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_CLUSTER -P INPUT ACCEPT 2>/dev/null
					$IP6T_CLUSTER -P OUTPUT ACCEPT 2>/dev/null
					$IP6T_CLUSTER -P FORWARD ACCEPT 2>/dev/null
					$IP6T_CLUSTER -A FORWARD -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_CLUSTER -A INPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_CLUSTER -A OUTPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1

				fi
			else
				# NOT USING iptables-cluster

				# Flushing entire firewall

				$IPT_LOCAL -F 2>/dev/null || flush_vlan_retval=1
				$IPT_LOCAL -F -t nat 2>/dev/null || flush_vlan_retval=1
				$IPT_LOCAL -X 2>/dev/null || flush_vlan_retval=1
				$IP6T_LOCAL -F 2>/dev/null || flush_vlan_retval=1
				$IP6T_LOCAL -X 2>/dev/null || flush_vlan_retval=1

				# Flushing SETS
				$IPSET_LOCAL flush 2>/dev/null || flush_vlan_retval=1
				$IPSET_LOCAL x 2>/dev/null || flush_vlan_retval=1

				if [ "$PERMISSIVE_TRAFFIC_WHEN_STOP" == "yes" ]
				then
					$IPT_LOCAL -P INPUT ACCEPT 2>/dev/null
					$IPT_LOCAL -P OUTPUT ACCEPT 2>/dev/null
					$IPT_LOCAL -P FORWARD ACCEPT 2>/dev/null
					$IPT_LOCAL -A FORWARD -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IPT_LOCAL -A INPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IPT_LOCAL -A OUTPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_LOCAL -P INPUT ACCEPT 2>/dev/null
					$IP6T_LOCAL -P OUTPUT ACCEPT 2>/dev/null
					$IP6T_LOCAL -P FORWARD ACCEPT 2>/dev/null
					$IP6T_LOCAL -A FORWARD -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_LOCAL -A INPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_LOCAL -A OUTPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1

				fi
			fi
		else
			if grep -i nat <<< $1 > /dev/null
			then
				if [ "$USE_IPTABLES_CLUSTER" == "yes" ]
				then
					# Using iptables-cluster

					# Flushing nat rules
					$IPT_CLUSTER -F -t nat 2>/dev/null || flush_vlan_retval=1
				else
					# Not using iptables-cluster

					# Flushing nat rules
					$IPT_LOCAL -F -t nat 2>/dev/null || flush_vlan_retval=1

				fi
			else
				if [ "$USE_IPTABLES_CLUSTER" == "yes" ]
				then
					# No tenemos reglas de nat
					$IPT_CLUSTER -F $1 2>/dev/null || flush_vlan_retval=1
					$IPT_CLUSTER -A $1 -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_CLUSTER -F $1 2>/dev/null || flush_vlan_retval=1
					$IP6T_CLUSTER -A $1 -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
				else
					# No tenemos reglas de nat
					$IPT_LOCAL -F $1 2>/dev/null || flush_vlan_retval=1
					$IPT_LOCAL -A $1 -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
					$IP6T_LOCAL -F $1 2>/dev/null || flush_vlan_retval=1
					$IP6T_LOCAL -A $1 -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2>/dev/null || flush_vlan_retval=1
				fi
			fi
		fi
	else
		flush_vlan_retval=1
	fi
	return $flush_vlan_retval
}

log_vlan()
{
	local log_vlan_retval=0
	local cont=0

	# Recibe como parametro una vlan o nat
	if [ ! -z "$1" ]
	then
		if grep -i core <<< $1 > /dev/null
		then
			# Estamos en el fichero core. Como es posible que sea la primera vez que arranque, esto puede fallar
			# AdemÃ¡s, es necesario hacer un for, porque de anteriores ejecuciones fallidas es posible que haya mas reglas
			while $IPT -C FORWARD -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null
			do
				# se evita bucle infinito por un error
				[ $cont -gt 1000 ] && break
				(( cont++ ))

				$IPT -D FORWARD -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null \
					|| message "W: Unable to remove transaccional rule (forward)."
			done

			cont=0
			while $IPT -C INPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null
			do
				# se evita bucle infinito por un error
				[ $cont -gt 1000 ] && break
				(( cont++ ))

				$IPT -D INPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null \
					|| message "W: Unable to remove transaccional rule (input)."
			done
			cont=0
			while $IPT -C OUTPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null
			do
				# se evita bucle infinito por un error
				[ $cont -gt 1000 ] && break
				(( cont++ ))

				$IPT -D OUTPUT -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null \
					|| message "W: Unable to remove transaccional rule (output)."
			done
		else
			if grep -i nat <<< $1 > /dev/null
			then
				# Tenemos reglas de nat
				echo "DEBUG: no haciendo nada de logeo, porque estamos en NAT" > /dev/null
			else
				# No tenemos reglas de nat

				# No se hace log de los sets
				grep -i set <<< $1 > /dev/null || $IPT -A $1 -j LOG --log-level debug --log-prefix "FILTER/${1}:" 2>/dev/null || log_vlan_retval=1
				# El return se agrega siempre
				$IPT -A $1 -j RETURN || log_vlan_retval=1

				# Se borran las reglas transaccionales sobrantes
				cont=0
				while $IPT -C $1 -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null
				do
					# se evita bucle infinito por un error
					[ $cont -gt 1000 ] && break
					(( cont++ ))
					$IPT -D $1 -m comment --comment "transaccional_rule_fw-admin" -j ACCEPT 2> /dev/null \
						|| message "W: Al eliminar reglas transaccionales durante la operaciÃ³n de $1."
				done
			fi
		fi
	else
		log_vlan_retval=1
	fi
	return $log_vlan_retval
}

# boolean stop(string chain_name) 	# for FORMAT=script
# boolean stop()			# for FORMAT=ruleset
# Used to stop rules of the firewall
stop()
{
	local stop_retval=0


	# CASE 1: When FORMAT=ruleset
	if [ "$FORMAT" == "ruleset" ]
	then
		if [ "$PERMIT_TRAFFIC_WHEN_STOP" == "yes" ]
		then
			# Flush and insert permissive rules
			message "E: Not implemented yet."
			do_exit 1

		else
			# Just flush
			message "E: Not implemented yet."
			do_exit 1
		fi
		return $stop_retval
	fi

	# CASE 2: When FORMAT=script
        if [ -z "$1" ]
        then
                message "E: Es necesario especificar un nombre de vlan/nat/core (el nombre que debe tener el fichero en $CONF_DIR)"
                stop_retval=1
        else
                local vlan=$1
                if [ ! -x $CONF_DIR/$vlan ]
                then
                        message "E: No se encuentra fichero de vlan/nat/core o no tiene permisos de ejecucion."
                        stop_retval=1
                fi
        fi

	if [ $stop_retval -eq 0 ]
	then
		flush_vlan $vlan || message "W: Fallo al flushear las reglas de la vlan/nat/core"
	fi

	return $stop_retval
}

# Se llama sin parametros
# checkea y recarga los datos de conjuntos
ipset_reload()
{
	local ipset_reload_retval=0
	local tiempo_inicio="`date +%s`"

	# Checkear el fichero de IPSET
	check_rulefile $IPSET_CONF || return $?


	# Now IPv4
	message "I: Reloading now IPset IPv4 data."
	source $VARS_IPV4 && source $VARS_IPSETV4 \
		|| { message "E: Unable to load IPv4 datafiles." ; ipset_reload_retval=1 ; }
	if [ $ipset_reload_retval -eq 0 ]
	then
		local cont=0
		# evaluating in we need calcules related to the progress bar
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			local lineas=`grep -v ^[[:space:]]*# $IPSET_CONF | grep -v ^[[:space:]]*$ | wc -l` #total de lineas ejecutables
		fi

		oldIFS=$IFS ; IFS=$'\n' # Controls over IFS
		for linea in `grep -v ^[[:space:]]*# $IPSET_CONF | grep -v ^[[:space:]]*$` #recorriendo fichero linea a linea
		do
			((cont++))
			# evaluating in we need calcules related to the progress bar
			[ "$USE_PROGRESS_BAR" == "yes" ] && [ -z "$flag_no_check" ] && libprogressbar $cont $lineas

			# Evaluate the line of the file.
			error_msg=$( eval "${linea} 2>&1" 2>&1 )
			if [ $? -ne 0 ]
			then
				message "E: Error found reloading sets in IPv4. Rule num (not line) [$cont]."
				echo "Details:"
				echo " ${linea}"
				for line in $error_msg
				do
					echo " $line"
				done
				do_exit 1
			fi
		done
		IFS=$oldIFS # Controls over IFS
	fi

	# Now IPv6
	message "I: Reloading now IPset IPv6 data."
	source $VARS_IPV6 && source $VARS_IPSETV6 \
		|| { message "E: Unable to load IPv6 datafiles." ; ipset_reload_retval=1 ; }
	if [ $ipset_reload_retval -eq 0 ]
	then
		local cont=0
		# evaluating in we need calcules related to the progress bar
		if [ "$USE_PROGRESS_BAR" == "yes" ]
		then
			local lineas=`grep -v ^[[:space:]]*# $IPSET_CONF | grep -v ^[[:space:]]*$ | wc -l` #total de lineas ejecutables
		fi

		oldIFS=$IFS ; IFS=$'\n' # Controls over IFS
		for linea in `grep -v ^[[:space:]]*# $IPSET_CONF | grep -v ^[[:space:]]*$` #recorriendo fichero linea a linea
		do
			((cont++))
			# evaluating in we need calcules related to the progress bar
			[ "$USE_PROGRESS_BAR" == "yes" ] && [ -z "$flag_no_check" ] && libprogressbar $cont $lineas

			# Evaluate the line of the file.
			error_msg=$( eval "${linea} 2>&1" 2>&1 )
			if [ $? -ne 0 ]
			then
				message "E: Error found reloading sets in IPv6. Rule num (not line) [$cont]."
				echo "Details:"
				echo " ${linea}"
				for line in $error_msg
				do
					echo " $line"
				done
				do_exit 1
			fi
		done
		IFS=$oldIFS # Controls over IFS
	fi

        local tiempo_final="`date +%s`"
        message "I: Operation time: `expr $tiempo_final - $tiempo_inicio` seconds."

	return $ipset_reload_retval
}

# boolean start_in_restore_format_loop(string filename, string protocol)
# Iterate over a file with iptables-restore format, doing variable replacement
# and initialization.
# protocol=ipv4|ipv6
# JUST A POC
start_in_restore_format_loop()
{
	local start_in_restore_format_loop_retval=0
	local filename=$1
	local protocol=$2

	if [ ! -r "$filename" ]
	then
		message "E: File not found $filename"
		do_exit 1
	fi

	case "$protocol" in
		ipv4)
			source $VARS_IPV4 || return 1
			source $VARS_IPSETV4 || return 1
			;;
		ipv6)
			source $VARS_IPV6 || return 1
			source $VARS_IPSETV6 || return 1
			;;
		*)
			message "E: Bad call to function start_in_restore_format_loop()."
			do_exit 1
	esac

	local rules=""
	case "$protocol" in
		ipv4)
			rules=$( cat $filename )
			;;
		ipv6)
			rules=$( delete_nat_from_ruleset $filename )
			[ $? -ne 0 ] && rules=$( cat $filename )
			;;
	esac
	# Iterate over variables ($FOO) on file
	for word in `grep -v ^[[:space:]]*# $filename | tr [[:space:]] '\n' | fgrep \$ | sort -u | grep -v ^[[:space:]]*$`
	do
		variable=$word
		data=`eval "echo $word"`
		data=$( echo $data | sed -e 's/\//\\\//g' ) #cleaning /
		rules=$( sed s/"$variable"/"$data"/g <<< "$rules" 2>&1)
		if [ $? -ne 0 ]
		then
			message "E: Errors found trying to replace with \`sed' the variable $variable in $protocol"
			echo "Details:" >&2
			echo " $rules" >&2
			return 1
		fi
	done

	case "$protocol" in
		ipv4)
			iptables-restore <<< "$rules" || start_in_restore_format_loop_retval=1
			;;
		ipv6)
			# Delete NAT stuff
			ip6tables-restore <<< "$rules" || start_in_restore_format_loop_retval=1
			;;
	esac

	return $start_in_restore_format_loop_retval
}

# text delete_nat_from_ruleset(string filename)
# Delete all from *nat to COMMIT to have the ruleset ip6tables compliant
delete_nat_from_ruleset()
{
	local delete_nat_from_ruleset_retval=0
	local filename=$1

	if [ ! -r "$filename" ]
	then
		message "E: Function delete_nat_from_ruleset() called with invalid argument. File not found."
		do_exit 1
	fi

	local headingline=$( cat $filename | nl -ba | grep -i ^[[:space:]]*[0-9]*[[:space:]]*"\*"nat | awk -F' ' '{print $1}' 2>/dev/null )
	[[ $headingline =~ ^[0-9]$ ]] || delete_nat_from_ruleset_retval=1

	if [ $delete_nat_from_ruleset_retval -eq 0 ]
	then
		# continue calcules
		local list_of_tailingline=$( cat ruleset | nl -ba | grep ^[[:space:]]*[0-9]*[[:space:]]"COMMIT"$ | awk -F' ' '{print $1}' | tr '\n' ' ' 2>/dev/null )

		# Calculate now what COMMIT line belongs to nat declaration
		oldIFS=$IFS ; IFS=$' ' #control over IFS
		local max_difference=$( wc -l $filename | cut -d' ' -f 1)
		for num in $list_of_tailingline
		do
			local difference=$(( num - headingline ))
			if [ $difference -lt $max_difference ]
			then
				max_difference=$difference
				tailingline=$num
			fi
		done
		IFS=$oldIFS
		# When the for is over, whe know tailingline and headingline
		sed ${headingline},${tailingline}d $filename # this is the text return
		delete_nat_from_ruletes_retval=$?
	fi

	return $delete_nat_from_ruleset_retval
}

# boolean start_in_restore_format(string filename)
start_in_restore_format()
{
	local start_in_restore_format_retval=0
	local initial_time=`date +%s`
	local filename=$1

	if [ ! -r "$filename" ]
	then
		message "E: File not found $filename"
		do_exit 1
	fi

	# Checking rulefile.
	if ! check_rulefile $filename
	then
		message "E: Check failed. Don't starting."
		do_exit 1 # Exit point
	fi


	# Start IPv4
	message "I: Starting IPv4 ruleset."
	if ! start_in_restore_format_loop $filename ipv4
	then
		start_in_restore_format_retval=$?
		message "W: Errors found loading ruleset of $filename in IPv4"
	fi

	# Start IPv6
	message "I: Starting IPv6 ruleset."
	if ! start_in_restore_format_loop $filename ipv6
	then
		start_in_restore_format_retval=$?
		message "W: Errors found loading ruleset of $filename in IPv6"
	fi

	# Finishing
	message "I: Operation time: $(( `date +%s` - initial_time )) seconds."

	return $start_in_restore_format_retval
}

# (@_@)
